
let succ = <Int->Int>


let fixpoint = fun f ->
  let delta = fun x ->
     f ( fun  v -> ( x x v ))
   in delta delta


let fact_stub fact n =
  if n is 0 then 1 else (fact (n-1))*n

let fact = fixpoint fact_stub


let length_stub length lst =
  if lst is Nil then 0 else succ (length (snd lst))

let length = fixpoint length_stub


let map_stub map f lst =
  if lst is Nil then nil
  else (f (fst lst), map f (snd lst))

let map = fixpoint map_stub
