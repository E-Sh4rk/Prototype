
let (-) = <Int->Int->Int>
let ( * ) = <Int->Int->Int>
let succ = <Int->Int>

let fixpoint = < (('a -> 'b) -> ('a -> 'b)) -> 'a -> 'b >


let test_patterns (a,_) = a

let test2_patterns x =
  match x with (a,_)&(_,b) -> (a,b) end

let test3_patterns x y =
  let pack x y = (x,y) in
  let (y,x) = pack x y in
  pack x y

let typeof_patterns x =
  match x with
  | :Unit | :Nil -> "Nil"
  | :String -> "String"
  | :Char -> "Char"
  | :Int -> "Number"
  | :Bool -> "Boolean"
  | :Any -> "Object"
  end

let land_patterns a b =
  match a,b with
  | :True, :True -> true
  | :Any -> false
  end


let fact_pat fact n =
  match n with
  | :0 -> 1
  | n -> (fact (n-1))*n
  end

let fact = fixpoint fact_pat


let length_pat length lst =
  match lst with
  | :[] -> 0
  | (_, tl & :List) -> succ (length tl)
  end

let length = fixpoint length_pat


let map_pat map f lst =
  match lst with
  | :[] -> []
  | (hd, tl) & :List -> (f hd, map f tl)
  end

let map = fixpoint map_pat
